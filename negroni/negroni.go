// Code generated by "pkgimport -p negroni -i github.com/urfave/negroni -o negroni.go"; DO NOT EDIT.
// Install by "go get -u -v github.com/wzshiming/gotype/cmd/pkgimport";
//go:generate pkgimport -p negroni -i github.com/urfave/negroni -o negroni.go

package negroni

import (
	origin "github.com/urfave/negroni"
)

// type
type (

	// TextPanicFormatter output the stack
	// as simple text on os.Stdout. If no `Content-Type` is set,
	// it will output the data as `text/plain; charset=utf-8`.
	// Otherwise, the origin `Content-Type` is kept.
	TextPanicFormatter = origin.TextPanicFormatter

	// Static is a middleware handler that serves static files in the given
	// directory/filesystem. If the file does not exist on the filesystem, it
	// passes along to the next middleware in the chain. If you desire "fileserver"
	// type behavior where it returns a 404 for unfound files, you should consider
	// using http.FileServer from the Go stdlib.
	Static = origin.Static

	// ResponseWriter is a wrapper around http.ResponseWriter that provides extra information about
	// the response. It is recommended that middleware handlers use this construct to wrap a responsewriter
	// if the functionality calls for it.
	ResponseWriter = origin.ResponseWriter

	// Recovery is a Negroni middleware that recovers from any panics and writes a 500 if there was one.
	Recovery = origin.Recovery

	// PanicInformation contains all
	// elements for printing stack informations.
	PanicInformation = origin.PanicInformation

	// PanicFormatter is an interface on object can implement
	// to be able to output the stack trace
	PanicFormatter = origin.PanicFormatter

	// Negroni is a stack of Middleware Handlers that can be invoked as an http.Handler.
	// Negroni middleware is evaluated in the order that they are added to the stack using
	// the Use and UseHandler methods.
	Negroni = origin.Negroni

	// LoggerEntry is the structure passed to the template.
	LoggerEntry = origin.LoggerEntry

	// Logger is a middleware handler that logs the request as it goes in and the response as it goes out.
	Logger = origin.Logger

	// HandlerFunc is an adapter to allow the use of ordinary functions as Negroni handlers.
	// If f is a function with the appropriate signature, HandlerFunc(f) is a Handler object that calls f.
	HandlerFunc = origin.HandlerFunc

	// Handler handler is an interface that objects can implement to be registered to serve as middleware
	// in the Negroni middleware stack.
	// ServeHTTP should yield to the next middleware in the chain by invoking the next http.HandlerFunc
	// passed in.
	//
	// If the Handler writes to the ResponseWriter, the next http.HandlerFunc should not be invoked.
	Handler = origin.Handler

	// HTMLPanicFormatter output the stack inside
	// an HTML page. This has been largely inspired by
	// https://github.com/go-martini/martini/pull/156/commits.
	HTMLPanicFormatter = origin.HTMLPanicFormatter

	// ALogger interface
	ALogger = origin.ALogger
)

// Declaration
var (

	// WrapFunc converts a http.HandlerFunc into a negroni.Handler so it can be used as a Negroni
	// middleware. The next http.HandlerFunc is automatically called after the Handler
	// is executed.
	WrapFunc = origin.WrapFunc

	// Wrap converts a http.Handler into a negroni.Handler so it can be used as a Negroni
	// middleware. The next http.HandlerFunc is automatically called after the Handler
	// is executed.
	Wrap = origin.Wrap

	// NewStatic returns a new instance of Static
	NewStatic = origin.NewStatic

	// NewResponseWriter creates a ResponseWriter that wraps an http.ResponseWriter
	NewResponseWriter = origin.NewResponseWriter

	// NewRecovery returns a new instance of Recovery
	NewRecovery = origin.NewRecovery

	// NewLogger returns a new Logger instance
	NewLogger = origin.NewLogger

	// New returns a new Negroni instance with no middleware preconfigured.
	New = origin.New

	// LoggerDefaultFormat is the format logged used by the default Logger instance.
	LoggerDefaultFormat = origin.LoggerDefaultFormat

	// LoggerDefaultDateFormat is the format used for date by the default Logger instance.
	LoggerDefaultDateFormat = origin.LoggerDefaultDateFormat

	// DefaultAddress is used if no other is specified.
	DefaultAddress = origin.DefaultAddress

	// Classic returns a new Negroni instance with the default middleware already
	// in the stack.
	//
	// Recovery - Panic Recovery Middleware
	// Logger - Request/Response Logging
	// Static - Static File Serving
	Classic = origin.Classic
)
