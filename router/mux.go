// Code generated by "pkgimport -p router -i github.com/gorilla/mux -o mux.go"; DO NOT EDIT.
// Install by "go get -u -v gopkg.in/pkgimport.v1/cmd/pkgimport";
//go:generate pkgimport -p router -i github.com/gorilla/mux -o mux.go

package router

import (
	origin "github.com/gorilla/mux"
)

type (
	// type

	Route = origin.Route

	MatcherFunc = origin.MatcherFunc

	BuildVarsFunc = origin.BuildVarsFunc

	Router = origin.Router

	WalkFunc = origin.WalkFunc

	RouteMatch = origin.RouteMatch
)

var (
	// function

	/*SetURLVars sets the URL variables for the given request, to be accessed via
	mux.Vars for testing route behaviour.

	This API should only be used for testing purposes; it provides a way to
	inject variables into the request context. Alternatively, URL variables
	can be set by making a route that captures the required variables,
	starting a server and sending the request to that server.
	*/
	SetURLVars = origin.SetURLVars

	/*NewRouter returns a new router instance.
	 */
	NewRouter = origin.NewRouter

	/*Vars returns the route variables for the current request, if any.
	 */
	Vars = origin.Vars

	/*CurrentRoute returns the matched route for the current request, if any.
	This only works when called inside the handler of the matched route
	because the matched route is stored in the request context which is cleared
	after the handler returns, unless the KeepContext option is set on the
	Router.
	*/
	CurrentRoute = origin.CurrentRoute
)

var (
	// value

	ErrMethodMismatch = origin.ErrMethodMismatch

	ErrNotFound = origin.ErrNotFound

	SkipRouter = origin.SkipRouter
)
