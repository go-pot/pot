// Code generated by "pkgimport -p router -i github.com/gorilla/mux -o mux.go"; DO NOT EDIT.
// Install by "go get -u -v github.com/wzshiming/gotype/cmd/pkgimport";
//go:generate pkgimport -p router -i github.com/gorilla/mux -o mux.go

package router

import (
	origin "github.com/gorilla/mux"
)

// type
type (

	// WalkFunc is the type of the function called for each route visited by Walk.
	// At every invocation, it is given the current route, and the current router,
	// and a list of ancestor routes that lead to the current route.
	WalkFunc = origin.WalkFunc

	// Router registers routes to be matched and dispatches a handler.
	//
	// It implements the http.Handler interface, so it can be registered to serve
	// requests:
	//
	// var router = mux.NewRouter()
	//
	// func main() {
	// http.Handle("/", router)
	// }
	//
	// Or, for Google App Engine, register it in a init() function:
	//
	// func init() {
	// http.Handle("/", router)
	// }
	//
	// This will send all incoming requests to the router.
	Router = origin.Router

	// RouteMatch stores information about a matched route.
	RouteMatch = origin.RouteMatch

	// Route stores information to match a request and build URLs.
	Route = origin.Route

	// MiddlewareFunc is a function which receives an http.Handler and returns another http.Handler.
	// Typically, the returned handler is a closure which does something with the http.ResponseWriter and http.Request passed
	// to it, and then calls the handler passed as parameter to the MiddlewareFunc.
	MiddlewareFunc = origin.MiddlewareFunc

	// MatcherFunc is the function signature used by custom matchers.
	MatcherFunc = origin.MatcherFunc

	// BuildVarsFunc is the function signature used by custom build variable
	// functions (which can modify route variables before a route's URL is built).
	BuildVarsFunc = origin.BuildVarsFunc
)

// Declaration
var (

	// Vars returns the route variables for the current request, if any.
	Vars = origin.Vars

	// SkipRouter is used as a return value from WalkFuncs to indicate that the
	// router that walk is about to descend down to should be skipped.
	SkipRouter = origin.SkipRouter

	// SetURLVars sets the URL variables for the given request, to be accessed via
	// mux.Vars for testing route behaviour. Arguments are not modified, a shallow
	// copy is returned.
	//
	// This API should only be used for testing purposes; it provides a way to
	// inject variables into the request context. Alternatively, URL variables
	// can be set by making a route that captures the required variables,
	// starting a server and sending the request to that server.
	SetURLVars = origin.SetURLVars

	// NewRouter returns a new router instance.
	NewRouter = origin.NewRouter

	// ErrNotFound is returned when no route match is found.
	ErrNotFound = origin.ErrNotFound

	// ErrMethodMismatch is returned when the method in the request does not match
	// the method defined against the route.
	ErrMethodMismatch = origin.ErrMethodMismatch

	// CurrentRoute returns the matched route for the current request, if any.
	// This only works when called inside the handler of the matched route
	// because the matched route is stored in the request context which is cleared
	// after the handler returns, unless the KeepContext option is set on the
	// Router.
	CurrentRoute = origin.CurrentRoute

	// CORSMethodMiddleware sets the Access-Control-Allow-Methods response header
	// on a request, by matching routes based only on paths. It also handles
	// OPTIONS requests, by settings Access-Control-Allow-Methods, and then
	// returning without calling the next http handler.
	CORSMethodMiddleware = origin.CORSMethodMiddleware
)
