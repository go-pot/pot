// Code generated by "pkgimport -p orm -i github.com/wzshiming/beego/orm -o orm.go"; DO NOT EDIT.
// Install by "go get -u -v gopkg.in/pkgimport.v1/cmd/pkgimport";
//go:generate pkgimport -p orm -i github.com/wzshiming/beego/orm -o orm.go

package orm

import (
	origin "github.com/wzshiming/beego/orm"
)

type (
	// type

	Log = origin.Log

	QueryBuilder = origin.QueryBuilder

	StrTo = origin.StrTo

	Params = origin.Params

	ParamsList = origin.ParamsList

	DriverType = origin.DriverType

	Condition = origin.Condition

	BooleanField = origin.BooleanField

	CharField = origin.CharField

	TimeField = origin.TimeField

	DateField = origin.DateField

	DateTimeField = origin.DateTimeField

	FloatField = origin.FloatField

	SmallIntegerField = origin.SmallIntegerField

	IntegerField = origin.IntegerField

	BigIntegerField = origin.BigIntegerField

	PositiveSmallIntegerField = origin.PositiveSmallIntegerField

	PositiveIntegerField = origin.PositiveIntegerField

	PositiveBigIntegerField = origin.PositiveBigIntegerField

	TextField = origin.TextField

	JSONField = origin.JSONField

	JsonbField = origin.JsonbField

	MySQLQueryBuilder = origin.MySQLQueryBuilder

	TiDBQueryBuilder = origin.TiDBQueryBuilder

	Driver = origin.Driver

	Fielder = origin.Fielder

	Ormer = origin.Ormer

	Inserter = origin.Inserter

	QuerySeter = origin.QuerySeter

	QueryM2Mer = origin.QueryM2Mer

	RawPreparer = origin.RawPreparer

	RawSeter = origin.RawSeter
)

var (
	// function

	/*ResetModelCache Clean model cache. Then you can re-RegisterModel.
	Common use this api for test case.
	*/
	ResetModelCache = origin.ResetModelCache

	/*NewLog set io.Writer to create a Logger.
	 */
	NewLog = origin.NewLog

	/*RegisterModel register models
	 */
	RegisterModel = origin.RegisterModel

	/*RegisterModelWithPrefix register models with a prefix
	 */
	RegisterModelWithPrefix = origin.RegisterModelWithPrefix

	/*RegisterModelWithSuffix register models with a suffix
	 */
	RegisterModelWithSuffix = origin.RegisterModelWithSuffix

	/*BootStrap bootrap models.
	make all model parsed and can not add more models
	*/
	BootStrap = origin.BootStrap

	/*ColValue do the field raw changes. e.g Nums = Nums + 10. usage:
	Params{
		"Nums": ColValue(Col_Add, 10),
	}
	*/
	ColValue = origin.ColValue

	/*NewQueryBuilder return the QueryBuilder
	 */
	NewQueryBuilder = origin.NewQueryBuilder

	/*ToStr interface to string
	 */
	ToStr = origin.ToStr

	/*ToInt64 interface to int64
	 */
	ToInt64 = origin.ToInt64

	/*RunCommand listen for orm command and then run it if command arguments passed.
	 */
	RunCommand = origin.RunCommand

	/*RunSyncdb run syncdb command line.
	name means table's alias name. default is "default".
	force means run next sql if the current is error.
	verbose means show all info when running command or not.
	*/
	RunSyncdb = origin.RunSyncdb

	/*NewOrm create new orm
	 */
	NewOrm = origin.NewOrm

	/*NewOrmWithDB create a new ormer object with specify *sql.DB for query
	 */
	NewOrmWithDB = origin.NewOrmWithDB

	/*AddAliasWthDB add a aliasName for the drivename
	 */
	AddAliasWthDB = origin.AddAliasWthDB

	/*RegisterDataBase Setting the database connect params. Use the database driver self dataSource args.
	 */
	RegisterDataBase = origin.RegisterDataBase

	/*RegisterDriver Register a database driver use specify driver name, this can be definition the driver is which database type.
	 */
	RegisterDriver = origin.RegisterDriver

	/*SetDataBaseTZ Change the database default used timezone
	 */
	SetDataBaseTZ = origin.SetDataBaseTZ

	/*SetMaxIdleConns Change the max idle conns for *sql.DB, use specify database alias name
	 */
	SetMaxIdleConns = origin.SetMaxIdleConns

	/*SetMaxOpenConns Change the max open conns for *sql.DB, use specify database alias name
	 */
	SetMaxOpenConns = origin.SetMaxOpenConns

	/*GetDB Get *sql.DB from registered database by db alias name.
	Use "default" as alias name if you not set.
	*/
	GetDB = origin.GetDB

	/*NewCondition return new condition struct
	 */
	NewCondition = origin.NewCondition
)

var (
	// value

	ColAdd = origin.ColAdd

	ColMinus = origin.ColMinus

	ColMultiply = origin.ColMultiply

	ColExcept = origin.ColExcept

	/*ErrMissPK missing pk error
	 */
	ErrMissPK = origin.ErrMissPK

	DebugQueries = origin.DebugQueries

	Debug = origin.Debug

	DebugLog = origin.DebugLog

	DefaultRowsLimit = origin.DefaultRowsLimit

	DefaultRelsDepth = origin.DefaultRelsDepth

	DefaultTimeLoc = origin.DefaultTimeLoc

	ErrTxHasBegan = origin.ErrTxHasBegan

	ErrTxDone = origin.ErrTxDone

	ErrMultiRows = origin.ErrMultiRows

	ErrNoRows = origin.ErrNoRows

	ErrStmtClosed = origin.ErrStmtClosed

	ErrArgs = origin.ErrArgs

	ErrNotImplement = origin.ErrNotImplement

	DRMySQL = origin.DRMySQL

	DRSqlite = origin.DRSqlite

	DROracle = origin.DROracle

	DRPostgres = origin.DRPostgres

	DRTiDB = origin.DRTiDB

	ExprSep = origin.ExprSep

	TypeBooleanField = origin.TypeBooleanField

	TypeCharField = origin.TypeCharField

	TypeTextField = origin.TypeTextField

	TypeTimeField = origin.TypeTimeField

	TypeDateField = origin.TypeDateField

	TypeDateTimeField = origin.TypeDateTimeField

	TypeBitField = origin.TypeBitField

	TypeSmallIntegerField = origin.TypeSmallIntegerField

	TypeIntegerField = origin.TypeIntegerField

	TypeBigIntegerField = origin.TypeBigIntegerField

	TypePositiveBitField = origin.TypePositiveBitField

	TypePositiveSmallIntegerField = origin.TypePositiveSmallIntegerField

	TypePositiveIntegerField = origin.TypePositiveIntegerField

	TypePositiveBigIntegerField = origin.TypePositiveBigIntegerField

	TypeFloatField = origin.TypeFloatField

	TypeDecimalField = origin.TypeDecimalField

	TypeJSONField = origin.TypeJSONField

	TypeJsonbField = origin.TypeJsonbField

	RelForeignKey = origin.RelForeignKey

	RelOneToOne = origin.RelOneToOne

	RelManyToMany = origin.RelManyToMany

	RelReverseOne = origin.RelReverseOne

	RelReverseMany = origin.RelReverseMany

	IsIntegerField = origin.IsIntegerField

	IsPositiveIntegerField = origin.IsPositiveIntegerField

	IsRelField = origin.IsRelField

	IsFieldType = origin.IsFieldType

	CommaSpace = origin.CommaSpace
)
