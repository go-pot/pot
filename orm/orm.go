// Code generated by "pkgimport -p orm -i github.com/wzshiming/beego/orm -o orm.go"; DO NOT EDIT.
// Install by "go get -u -v github.com/wzshiming/gotype/cmd/pkgimport";
//go:generate pkgimport -p orm -i github.com/wzshiming/beego/orm -o orm.go

package orm

import (
	origin "github.com/wzshiming/beego/orm"
)

// type
type (

	// TimeField A time, represented in go by a time.Time instance.
	// only time values like 10:00:00
	// Has a few extra, optional attr tag:
	//
	// auto_now:
	// Automatically set the field to now every time the object is saved. Useful for “last-modified” timestamps.
	// Note that the current date is always used; it’s not just a default value that you can override.
	//
	// auto_now_add:
	// Automatically set the field to now when the object is first created. Useful for creation of timestamps.
	// Note that the current date is always used; it’s not just a default value that you can override.
	//
	// eg: `orm:"auto_now"` or `orm:"auto_now_add"`
	TimeField = origin.TimeField

	// TiDBQueryBuilder is the SQL build
	TiDBQueryBuilder = origin.TiDBQueryBuilder

	// TextField A large text field.
	TextField = origin.TextField

	// StrTo is the target string
	StrTo = origin.StrTo

	// SmallIntegerField -32768 to 32767
	SmallIntegerField = origin.SmallIntegerField

	// RawSeter raw query seter
	// create From Ormer.Raw
	// for example:
	// sql := fmt.Sprintf("SELECT %sid%s,%sname%s FROM %suser%s WHERE id = ?",Q,Q,Q,Q,Q,Q)
	// rs := Ormer.Raw(sql, 1)
	RawSeter = origin.RawSeter

	// RawPreparer raw query statement
	RawPreparer = origin.RawPreparer

	// QuerySeter query seter
	QuerySeter = origin.QuerySeter

	// QueryM2Mer model to model query struct
	// all operations are on the m2m table only, will not affect the origin model table
	QueryM2Mer = origin.QueryM2Mer

	// QueryBuilder is the Query builder interface
	QueryBuilder = origin.QueryBuilder

	// PositiveSmallIntegerField 0 to 65535
	PositiveSmallIntegerField = origin.PositiveSmallIntegerField

	// PositiveIntegerField 0 to 4294967295
	PositiveIntegerField = origin.PositiveIntegerField

	// PositiveBigIntegerField 0 to 18446744073709551615
	PositiveBigIntegerField = origin.PositiveBigIntegerField

	// ParamsList stores paramslist
	ParamsList = origin.ParamsList

	// Params stores the Params
	Params = origin.Params

	// Ormer define the orm interface
	Ormer = origin.Ormer

	// MySQLQueryBuilder is the SQL build
	MySQLQueryBuilder = origin.MySQLQueryBuilder

	// Log implement the log.Logger
	Log = origin.Log

	// JsonbField postgres json field.
	JsonbField = origin.JsonbField

	// JSONField postgres json field.
	JSONField = origin.JSONField

	// IntegerField -2147483648 to 2147483647
	IntegerField = origin.IntegerField

	// Inserter insert prepared statement
	Inserter = origin.Inserter

	// FloatField A floating-point number represented in go by a float32 value.
	FloatField = origin.FloatField

	// Fielder define field info
	Fielder = origin.Fielder

	// DriverType database driver constant int.
	DriverType = origin.DriverType

	// Driver define database driver
	Driver = origin.Driver

	// DateTimeField A date, represented in go by a time.Time instance.
	// datetime values like 2006-01-02 15:04:05
	// Takes the same extra arguments as DateField.
	DateTimeField = origin.DateTimeField

	// DateField A date, represented in go by a time.Time instance.
	// only date values like 2006-01-02
	// Has a few extra, optional attr tag:
	//
	// auto_now:
	// Automatically set the field to now every time the object is saved. Useful for “last-modified” timestamps.
	// Note that the current date is always used; it’s not just a default value that you can override.
	//
	// auto_now_add:
	// Automatically set the field to now when the object is first created. Useful for creation of timestamps.
	// Note that the current date is always used; it’s not just a default value that you can override.
	//
	// eg: `orm:"auto_now"` or `orm:"auto_now_add"`
	DateField = origin.DateField

	// Condition struct.
	// work for WHERE conditions.
	Condition = origin.Condition

	// CharField A string field
	// required values tag: size
	// The size is enforced at the database level and in models’s validation.
	// eg: `orm:"size(120)"`
	CharField = origin.CharField

	// BooleanField A true/false field.
	BooleanField = origin.BooleanField

	// BigIntegerField -9223372036854775808 to 9223372036854775807.
	BigIntegerField = origin.BigIntegerField
)

// Declaration
var (
	TypeTimeField = origin.TypeTimeField

	TypeTextField = origin.TypeTextField

	TypeSmallIntegerField = origin.TypeSmallIntegerField

	TypePositiveSmallIntegerField = origin.TypePositiveSmallIntegerField

	TypePositiveIntegerField = origin.TypePositiveIntegerField

	TypePositiveBitField = origin.TypePositiveBitField

	TypePositiveBigIntegerField = origin.TypePositiveBigIntegerField

	TypeJsonbField = origin.TypeJsonbField

	TypeJSONField = origin.TypeJSONField

	TypeIntegerField = origin.TypeIntegerField

	TypeFloatField = origin.TypeFloatField

	TypeDecimalField = origin.TypeDecimalField

	TypeDateTimeField = origin.TypeDateTimeField

	TypeDateField = origin.TypeDateField

	TypeCharField = origin.TypeCharField

	TypeBooleanField = origin.TypeBooleanField

	TypeBitField = origin.TypeBitField

	TypeBigIntegerField = origin.TypeBigIntegerField

	// ToStr interface to string
	ToStr = origin.ToStr

	// ToInt64 interface to int64
	ToInt64 = origin.ToInt64

	// SetMaxOpenConns Change the max open conns for *sql.DB, use specify database alias name
	SetMaxOpenConns = origin.SetMaxOpenConns

	// SetMaxIdleConns Change the max idle conns for *sql.DB, use specify database alias name
	SetMaxIdleConns = origin.SetMaxIdleConns

	// SetDataBaseTZ Change the database default used timezone
	SetDataBaseTZ = origin.SetDataBaseTZ

	// RunSyncdb run syncdb command line.
	// name means table's alias name. default is "default".
	// force means run next sql if the current is error.
	// verbose means show all info when running command or not.
	RunSyncdb = origin.RunSyncdb

	// RunCommand listen for orm command and then run it if command arguments passed.
	RunCommand = origin.RunCommand

	// ResetModelCache Clean model cache. Then you can re-RegisterModel.
	// Common use this api for test case.
	ResetModelCache = origin.ResetModelCache

	RelReverseOne = origin.RelReverseOne

	RelReverseMany = origin.RelReverseMany

	RelOneToOne = origin.RelOneToOne

	RelManyToMany = origin.RelManyToMany

	RelForeignKey = origin.RelForeignKey

	// RegisterModelWithSuffix register models with a suffix
	RegisterModelWithSuffix = origin.RegisterModelWithSuffix

	// RegisterModelWithPrefix register models with a prefix
	RegisterModelWithPrefix = origin.RegisterModelWithPrefix

	// RegisterModel register models
	RegisterModel = origin.RegisterModel

	// RegisterDriver Register a database driver use specify driver name, this can be definition the driver is which database type.
	RegisterDriver = origin.RegisterDriver

	// RegisterDataBase Setting the database connect params. Use the database driver self dataSource args.
	RegisterDataBase = origin.RegisterDataBase

	// NewQueryBuilder return the QueryBuilder
	NewQueryBuilder = origin.NewQueryBuilder

	// NewOrmWithDB create a new ormer object with specify *sql.DB for query
	NewOrmWithDB = origin.NewOrmWithDB

	// NewOrm create new orm
	NewOrm = origin.NewOrm

	// NewLog set io.Writer to create a Logger.
	NewLog = origin.NewLog

	// NewCondition return new condition struct
	NewCondition = origin.NewCondition

	IsRelField = origin.IsRelField

	IsPositiveIntegerField = origin.IsPositiveIntegerField

	IsIntegerField = origin.IsIntegerField

	IsFieldType = origin.IsFieldType

	// GetDB Get *sql.DB from registered database by db alias name.
	// Use "default" as alias name if you not set.
	GetDB = origin.GetDB

	ExprSep = origin.ExprSep

	ErrTxHasBegan = origin.ErrTxHasBegan

	ErrTxDone = origin.ErrTxDone

	ErrStmtClosed = origin.ErrStmtClosed

	ErrNotImplement = origin.ErrNotImplement

	ErrNoRows = origin.ErrNoRows

	ErrMultiRows = origin.ErrMultiRows

	// ErrMissPK missing pk error
	ErrMissPK = origin.ErrMissPK

	ErrArgs = origin.ErrArgs

	DefaultTimeLoc = origin.DefaultTimeLoc

	DefaultRowsLimit = origin.DefaultRowsLimit

	DefaultRelsDepth = origin.DefaultRelsDepth

	DebugQueries = origin.DebugQueries

	DebugLog = origin.DebugLog

	Debug = origin.Debug

	DRTiDB = origin.DRTiDB

	DRSqlite = origin.DRSqlite

	DRPostgres = origin.DRPostgres

	DROracle = origin.DROracle

	DRMySQL = origin.DRMySQL

	// CommaSpace is the separation
	CommaSpace = origin.CommaSpace

	// ColValue do the field raw changes. e.g Nums = Nums + 10. usage:
	// Params{
	// "Nums": ColValue(Col_Add, 10),
	// }
	ColValue = origin.ColValue

	ColMultiply = origin.ColMultiply

	ColMinus = origin.ColMinus

	ColExcept = origin.ColExcept

	ColAdd = origin.ColAdd

	// BootStrap bootrap models.
	// make all model parsed and can not add more models
	BootStrap = origin.BootStrap

	// AddAliasWthDB add a aliasName for the drivename
	AddAliasWthDB = origin.AddAliasWthDB
)
