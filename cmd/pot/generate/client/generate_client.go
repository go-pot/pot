package client

import (
	"bytes"
	"fmt"
	"go/format"
	"html/template"
	"io/ioutil"
	"path"

	"github.com/wzshiming/go-swagger/swagger"
	"github.com/wzshiming/go-swagger/swaggergen"
)

func GenerateClient(pkg, routers, controllers, out string) (err error) {

	if pkg == "" {
		pkg = "client"
	}

	swa := &swagger.Swagger{}
	swaggergen.GB(swa, routers, controllers)

	fp := FilledPackage{}
	fp.Parse(swa)
	t := "temp"
	temp := template.New(t)

	_, err = temp.Parse(mkClient)
	if err != nil {
		return err
	}

	// 解析模板
	buf := bytes.NewBuffer(nil)
	err = temp.ExecuteTemplate(buf, "temp", map[string]interface{}{
		"Fill":    fp,
		"Package": pkg,
	})
	if err != nil {
		return err
	}

	src := buf.Bytes()
	// 格式化源码
	src, err = format.Source(src)
	if err != nil {
		return err
	}

	out = path.Join(out)
	// 写文件
	d, _ := ioutil.ReadFile(out)
	if string(d) == string(src) {
		fmt.Println("[pot] Unchanged " + out)
	} else {
		err = ioutil.WriteFile(out, src, 0666)
		if err != nil {
			return err
		}
		fmt.Println("[pot] Generate " + out)
	}
	return nil
}

var mkClient = `// Code generated by "pot gen cli"; DO NOT EDIT.
package {{.Package}}

import (
	"time"
	resty "gopkg.in/resty.v1"
)

var (
	Cli = resty.New()
	_ = time.Now()	
)

{{range $k, $v := .Fill.Paths}}
// {{.Func}}
func {{.Func}}(
		{{range .ParametersHeader}}{{.Name}} {{.Type}},
		{{end}}
		{{range .ParametersBody}}{{.Name}} {{.Type}},
		{{end}}
		{{range .ParametersQuery}}{{.Name}} {{.Type}},
		{{end}}
		{{range .ParametersFormData}}{{.Name}} {{.Type}},
		{{end}}
		{{range .ParametersPath}}{{.Name}} {{.Type}},
		{{end}}	
	) (
		{{range .Responses}}_{{.Code}} {{.Type}},
		{{end}}	
		err error, 
	) {
	resp, err := Cli.R().
		{{range .ParametersHeader}}SetHeader("{{.Name}}",{{.Name}}).
		{{end}}
		{{range .ParametersBody}}SetBody({{.Name}}).
		{{end}}
		{{range .ParametersQuery}}SetQueryParam("{{.Name}}",{{.Name}}).
		{{end}}
		{{if .ParametersFormData}}SetFormData(map[string]string{ 
			{{range .ParametersFormData}}"{{.Name}}": {{.Name}},{{end}} 
		}).{{end}}
		{{if .ParametersPath}}SetPathParams(map[string]string{ 
			{{range .ParametersPath}}"{{.Name}}": {{.Name}},{{end}} 
		}).{{end}}
		{{.Method}}("{{.Path}}")
	if err != nil {
		return 
	}

	switch resp.StatusCode() {
	default:
		// TODO
	{{range .Responses}}
	case {{.Code}}:
		{{if .Unmarshal}}
		resty.Unmarshal(resp.Header().Get("Content-Type"), resp.Body(), &_{{.Code}})
		{{else}}
		_{{.Code}} = resp.Body()
		{{end}}
	{{end}}
	}

	return
}
{{end}}

{{range .Fill.Definitions}}
type {{.Name}} struct { 
	{{range .Properties}}{{.Name}} {{.Type}} // {{.Description}}
	{{end}}
}
{{end}}

`
