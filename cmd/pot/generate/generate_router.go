package generate

import (
	"bytes"
	"text/template"

	"github.com/wzshiming/pot"
)

func GenerateRouter(routers string, s interface{}) {

	t := "temp"
	temp := template.New(t)
	_, err := temp.Parse(mkRouter)
	if err != nil {
		pot.Mark(err)
		return
	}
	buf := bytes.NewBuffer(nil)
	err = temp.ExecuteTemplate(buf, "temp", s)
	if err != nil {
		pot.Mark(err)
		return
	}

	pot.Printf(buf.String())
	//	s := &swagger.Swagger{}
	//	swaggergen.GB(s, routers)
	//	pot.Println("Generate Router")

	//	tm, err := temp.Parse(mkRouter)
	//	if err != nil {
	//		pot.Mark(err)
	//		return
	//	}

	//	tm.ExecuteTemplate()

}

var mkRouter = `// Code generated by "pot gen rou"; DO NOT EDIT.
package routers

import (
	controllers "{{.infos.title}}/controllers"
	"net/http"

	"github.com/wzshiming/pot"
	"github.com/wzshiming/pot/router"
)

func init() {
	p := pot.Default
	r := router.NewRouter()

	paths := r.PathPrefix("{{.basePath}}").Subrouter()

	// init controllers
	{
		{{range $k, $v := .paths}}
		{{range $k1, $v1 := $v}}
		paths.Methods("{{$k1}}").Path("{{$k}}").HandlerFunc(
			func(w http.ResponseWriter, r *http.Request) {
				t := controllers.{{.Controller}}{}
				t.Init(p, w, r)
				t.{{.Function}}()
			})
		{{end}}
		{{end}}
	}

	r.Walk(router.PrintRouter)
	p.UseHandler(r)
}
`
